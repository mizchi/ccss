// Generated by CoffeeScript 1.6.3
(function() {
  var ccss, fs;

  if (typeof window !== "undefined" && window !== null) {
    ccss = window.ccss = function() {
      return ccss.render.apply(ccss, arguments);
    };
  } else {
    ccss = exports;
  }

  ccss.extend = function(object, properties) {
    var key, value;
    for (key in properties) {
      value = properties[key];
      object[key] = value;
    }
    return object;
  };

  ccss.render = function(rules) {
    var child, children, css, declarations, key, mixin, mixins, nested, pairs, selector, split, value, _i, _j, _len, _len1, _ref;
    css = '';
    for (selector in rules) {
      pairs = rules[selector];
      declarations = '';
      nested = {};
      if (mixins = pairs.mixins, pairs) {
        delete pairs.mixins;
        _ref = [].concat(mixins);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          mixin = _ref[_i];
          ccss.extend(pairs, mixin);
        }
      }
      for (key in pairs) {
        value = pairs[key];
        if (typeof value === 'object') {
          children = [];
          split = key.split(/\s*,\s*/);
          for (_j = 0, _len1 = split.length; _j < _len1; _j++) {
            child = split[_j];
            children.push("" + selector + " " + child);
          }
          nested[children.join(',')] = value;
        } else {
          key = key.replace(/[A-Z]/g, function(s) {
            return '-' + s.toLowerCase();
          });
          declarations += "  " + key + ": " + value + ";\n";
        }
      }
      declarations && (css += "" + selector + " {\n" + declarations + "}\n");
      css += ccss.render(nested);
    }
    return css;
  };

  if (!window) {
    fs = require('fs');
    ccss.compileFile = function(infile, outfile) {
      var css, rules;
      rules = require(process.cwd() + '/' + infile);
      css = ccss.render(rules);
      outfile || (outfile = infile.replace(/coffee$/, 'css'));
      return fs.writeFileSync(outfile, css);
    };
  }

}).call(this);
